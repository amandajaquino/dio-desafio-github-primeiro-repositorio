Aula 1 - Entendendo o Git e sua Importância
- Git criado em 2005 por Linus Torvalds é um sistema de versionamento de código distribuído.
- Linus Torvalds desenvolveu o Linux de forma colaborativa.
- Existia outro CSV (Git) no entanto tinha problemas dos quais Linus odiava.
- O github é da microsoft (remoto?) e o Git(local?) desenvolvido por Linus. 
- Github tem partes pagas assim como outros CSV.

Aula 2 - Comandos básicos para o desempenho de um bom terminal

Git - CLI (Command Line Interface) x GUI (graphical user interface)
- Mudar de Pasta 
 - Windows - cd nomedapasta x Linux - cd nomedapasta
 - Windows - cd .. x Linux - cd .. (para voltar um nível da pasta)

- Para limpar (Windows e Linux). Obs: Na aula ele fala que no windows é o cls(clear screen) no meu windows funcionou com o clear e com cls.
 - clear ou Ctrl+L

- Para autocompletar
 - Digitar o início e apertar a tecla TAB

- Listar as pastas
 - Windows - dir x Linux - ls (no meu windows tanto faz dir ou ls)

- Criar pastas/arquivos
 - Windows - mkdir x Linux - mkdir
Obs: quando dá certo as coisas no terminal, ele não retorna nenhuma mensagem de erro, portanto "silence for success". mkdir = make a directory

- Deletar pastas/arquivos
 - Windows - del (só deleta os arquivos que está dentro da pasta) ex: del workspace / rmdir ex.: rmdir workspace /S /Q (remove o diretório) x Linux - rm -rf
Obs.: seta para cima navega por comandos já executados.

- escrever de volta palavra ou texto
 - echo palavra + enter
 - echo hello > hello.txt (ele vai escrever a palavra hello no arquivo .txt)

Essa diferença entre windows e linux tem a ver com qual derivação do Shell é o Sistema. O linux é derivado do Bash. O que não vi no windows 11.

O Git bash é um terminal extendido para otimizar o uso do Git.

Aula 3 - Realizando a instalação do Git

Link para download do Git: https://git-scm.com/downloads
Instalar normalmente, aceitando todas as recomendações do GIT/Windows.

Aula 4 - Tópicos fundamentais para entender o funcionamento do Git

- SHA1

A sigla SHA significa secure Hash Algorithm (Algoritmo de hash seguro), é um conjunto de funções hash criptográficas projetadas pela NSA (Agência de Segurança Nacional dos EUA). A encriptação gera conjunto de characteres identificador de 40 dígitos.

A cada vez que é mudado uma letra ou vírgula, por exemplo, gera um novo SHA.

Para abrir o GitBash
Opção 1
1 - Abrir o GitBash;
2 - botão direito na parte superior da tela do Gitbash, clicar em options e é possível mudar o tema do GIT;

Opção 2
1 - Abrir a pasta que vai trabalhar ex:"C:\Users\aquin\OneDrive\2022\Projects\Software Engineer\Courses\DIO\Spread FullStack Bootcamp\workspace\primeiro-desafio\dio-desafio-github-primeiro-repositorio\Introdução ao Git e Github"
2 - Clicar com o botão direito
3 - Clicar em GitBash here

Para abrir o SHA1
openssl sha1 nomedoarquivo.txt

Aula 5 - Objetos internos do Git
- OBJETOS FUNDAMENTAIS

função echo : mostra o que escreve na frente 
exemplo: echo 'hello world'

 
Blob \0 (metadados): tem sha1 desses arquivos. Armazena o tipo do objeto. Portanto, armazena o tipo de objeto, o tamanho da string e etc.
 echo 'conteudo' | git hash-object --stdin
 echo -e 'blob 9\0conteudo' | openssl sha1

Trees \0: armazena os blobs, o nome dos arquivos, e aponta para os blobs. Se mudar um blob, muda o sha da tree.
tree-> readme/rakefile/lib -> blob/tree -> simplegit.rb -> blob


Commits
Commit -> tree 
Commit possui o SHA1, se alterar a blob altera todos os sha da tree e commit relacionado. Montando uma linha do tempo.

- Sistema distribuído e seguro:

Porque o git é um sistema distribuido e seguro: se um código estiver no seu computador e for alterado, essa nova versão terá um outro sha. Se o sistema cair em um local de armazenamento, terá outra versão em outro computado.


Aula 6 - Chave SSH e Token

Git password authentication is shutting down: https://github.blog/changelog/2021-08-12-git-password-authentication-is-shutting-down/

Chave SSH: Forma de estabelecer uma conexão segura/encriptada entre duas máquinas. Sempre terá duas chaves, uma pública e outra privada relativa a máquina cadastrada. A pública coloca no github. E a partir daí já será possível mandar código da máquina cadastrada para o girhub sem colocar senha.

Na página do github (logado na conta pessoal) --> clicar no icone da sua foto e ir em settings --> SSH and GPG keys --> New SSH Key -->

Passos: 1 - Gerar a chave/ 2 - Colocar a chave pública no Github/ 3 - Abrir o agent no CLI/ 4 - Colocar a chave privada no CLI.

No CLI (Gitbash)
Abrir o Gitbash
$ ssh-keygen -t ed25519 -C email@yahoo.com.br + enter
obs: usar o mesmo e-mail cadastrado no github
Ele vai mostrar a pasta que vai salvar
ele vai pedir a senha, não colocar a senha, só clicar em enter

abrir a pasta que ele indicou

Colar no github em SSH Keys:
ssh-ed25519 

Procedimento no CLI

usuario@usuario MINGW64 ~/.ssh
$ pwd
saída: /c/Users/aquin/.ssh

Inicializar o agente...

Passar a chave privada para o agente

para clonar:
ir em code--> na aba de SSH copiar o caminho informado--> digitar
git clone caminhosshcopiado + enter

digitar y + Enter

se digitar ls + enter 
o repositório irá aparecer

$ git clone git@github.com:python/cpython.git

$ ls
cpython/  id_ed25519  id_ed25519.pub  known_hosts  known_hosts.old

como clonou o repositório sem pedir a chave, sinal que está configurado o ssh corretamente.

Para excluir repositório:
$ rm -f -r cpython

usuário@usuário MINGW64 ~/.ssh
$ ls
id_ed25519  id_ed25519.pub  known_hosts  known_hosts.old

Token de acesso pessoal

Ir na imagem no github --> settings --> developer settings --> personal access tokens --> generate new token --> colocar uma nota/marcar a opção repo(se for mexer nas coisas padrão do github) --> clicar em "generate token" --> copiar e colar em um local seguro dentro da máquina. 

na pasta que vai clonar clicar em CODE --> HTTPS --> copiar o link

No Gitbash
$ git clone https://github.com/python/cpython.git

usuário@usuário MINGW64 ~/.ssh
$ ls
cpython/  id_ed25519  id_ed25519.pub  known_hosts  known_hosts.old


Aula 7 - Iniciando o Git e criando um commit

- Iniciar um repositório GIT (git init)

abrir o gitbash na pasta que vai utilizar (clicar em botão direito "gitbash here")

$ ls
workspace/

$ cd workspace

$ mkdir livro-receitas

$ ls
cpython/  livro-receitas/  primeiro-desafio/

ou pode criar a pasta dentro do diretório.

$ cd livro-receitas

$ ls

$ git init
Initialized empty Git repository in...

$ ls


obs: a pasta não aparece, pois é uma pasta oculta.
Para ver a pasta oculta:

$ ls -a
./  ../  .git/

$ cd .git/

$ ls
HEAD  config  description  hooks/  info/  objects/  refs/

configurações iniciais

$ git config --global user.email "jord_amanda@yahoo.com.br"

$ git config --global user.name Amanda

- Iniciar o versionamento (git add) / Criar um commit (git commit)

$ git add *

$ git commit -m "commit inicial"

Outros: 
Deleting a repository
On GitHub.com, navigate to the main page of the repository.
Under your repository name, click Settings.
Under Danger Zone, click Delete this repository.
Read the warnings.
To verify that you're deleting the correct repository, type the name of the repository you want to delete.


Aula 8 - Passo a passo no ciclo de vida

GIT INIT : cria um repositório no GIT dentro de uma pasta (diretório).

Tudo abaixo ocorre no ambiente em desenvolvimento - local
- Tracked: arquivos que podem ser rastreados no GIT
- Untracked--> Staged: Adiciona o Arquivo (git add).
- Unmodified-->modified: Edita arquivo (git compara o sha1 dos arquivos).
- Modified-->Staged: "Stage" o arquivo (coloca o arquivo no palco). Utilizando o git add.
- Staged--> Unmodified: Commit (git commit). Envelopa todo o arquivo com autor, hora e data.
- Unmodified-->Untracked (não rastreado pelo GIT): Remove o arquivo

Ambiente em desenvolvimento (Git): Working directory, staging are, local repository.

Servidor: Remote repository - Github
Obs: Empurar do repositório local para o repositório remoto

$ ls
strogonoff.md

$ git status
On branch master
nothing to commit, working tree clean

$ mkdir receitas

$ ls
receitas/  strogonoff.md

$ mv strogonoff.md ./receitas/

$ cd receitas

$ ls
strogonoff.md

$ cd ..

$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    strogonoff.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        receitas/

no changes added to commit (use "git add" and/or "git commit -a")

$ git add strogonoff.md receitas/

$ git status

$ git status

$ echo > README.md

$ ls
README.md  receitas/

$ git status

$ git status

$ git add *

Obs.: git add * salva todas as alterações

$ ls

$ git status

$ git commit -m "adiciona index"

$ git status

Aula 9 - Trabalhando com o GitHub


É importante que o mesmo e-mail configurado no github, seja configurado no git.Para verificar as configurações no git fazer o seguinte comando:

$ git config --list

Caso precise alterar:

$ git config --global --unset user.email

$ git config --global --unset user.name

$ git config --list

obs.:não há mais o email e o user.

$ git config --global user.email "email@yahoo.com.br"

$ git config --global user.name "usuario"

$ git config --list

Para criar um repositório no Github:

1--> Ir na foto do perfil do Github;
2--> Clica em repositório
3--> Mudar o nome do repositório, a descrição, se é publico ou privado, adicionar o README se não tiver adicionado
4--> Clicar em Create repository

Para adicionar o repositório no Github:

1--> Abrir o gitbash dentro da pasta livro de receitas
2--> Empurrar o repositório local para o remoto:
 a-) adicionar a origem:

$ git remote add origin https://github.com/amandajaquino/livro-receitas.git

$ git remote -v

$ git status
On branch master
nothing to commit, working tree clean

 b-) Empurar o repositório:

$ git push origin master

obs.: no github é possível navegar no histórico de commit pelo número sha1.


Aula 10 - Como os conflitos acontecem no GitHub e como resolvê-los

1-> Atualização de código (conflito de merge)

Quando alguém vai contribuir com o seu código, ela clona aquele código, faz as alterações, commita para o git. E empura para o github.

Após isso, se você fizer alterações o git irá lhe dizer que é preciso verificar, copiar as alterações já feitas e empurar novamente para o github.

a-> fazer as modificações no livro readme e dar os seguintes comandos:

$ ls
README.md  receitas/

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")

$ git add *

$ git commit -m "Adiciona receita pave"

$ git status

$ git push origin master

Obs.: Se tivesse outro arquivo que outro usuário teria adicionado, o git não teria aceitado o git push. Teria dado o erro
...error: failed to push some refes to 'https://github.com/amandajaquino/livro-receitas.git' 
hint: Uptades were rejected because the remote contais work that you do not have locally...

Para resolver:

$ git pull origin master

saída:... CONFLICT (content): Merge conflict in README.md...

Abrir o arquivo com conflito de merge, verificar as modificações que não tem no seu repositório. Salvar e fazer os seguintes comandos:

$ git status

Saída: ... You have unmerged paths...

$ git add *

$ git commit -m "resolve conflitos"

$ git push origin master

$ git status

$ git add *

$ git push origin master

$ git status


















